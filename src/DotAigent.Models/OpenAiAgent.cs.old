namespace DotAigent.Models;

using DotAigent.Core;
using OpenAI;
using OpenAI.Chat;

/// <summary>
/// Implementation of OpenAI model
/// </summary>
public class OpenAIModel : IOpenAiModel
{
    

    /// <summary>
    /// Gets or sets OpenAI client options
    /// </summary>
    public OpenAIClientOptions Options { get; } = new();

    /// <summary>
    /// Gets or sets the model name to use
    /// </summary>
    public string ModelName { get; set; } = "gemma3:12b";
    string ApiKey { get;  set; } = "provide-your-api-key-please";
    Uri? Uri { get;  set; }

    /// <summary>
    /// Creates a new OpenAI model
    /// </summary>
    /// <param name="apiKey">Optional API key. If not provided, it will be taken from environment variables.</param>
    public OpenAIModel(string? apiKey = null)
    {
        ApiKey = apiKey ?? Environment.GetEnvironmentVariable("OPENAI_API_KEY") ?? "provide-your-api-key-please";

        Options.Endpoint = new Uri("http://localhost:11434/v1");
    }

    /// <summary>
    /// Generates a response for the given prompt
    /// </summary>
    public async Task<string> GenerateResponseAsync(string prompt)
    {
        var client = new ChatClient(model: ModelName, credential: new(ApiKey), options: Options);

        ChatCompletion completion = await client.CompleteChatAsync(prompt);

        return completion.Content[0].Text;
    }
}

