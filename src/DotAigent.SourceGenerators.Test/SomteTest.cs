using Xunit;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using System.Threading.Tasks;

// Adjust namespace as needed
namespace DotAigent.SourceGenerators.Tests;

// Use your actual generator type here
using GeneratorUnderTest = DotAigent.SourceGenerators.AgentResponseExampleGenerator;

public class AgentResponseExampleGeneratorTests
    : CSharpSourceGeneratorTest<GeneratorUnderTest, XUnitVerifier>
{
    // --- Define AttributeSource and InterfaceSource constants here as shown above ---
    private const string AttributeSource = @"..."; // As above
    private const string InterfaceSource = @"..."; // As above

    private static string GetBoilerplate(string userSource) =>
        AttributeSource + "\n" + InterfaceSource + "\n" + userSource;

    // Basic test case: Class in a namespace with supported properties
    [Fact]
    public async Task GeneratesExample_ForClassInNamespace_WithSupportedProperties()
    {
        var userSource = @"
using DotAigent.Core;

namespace MyTestApp
{
    [AgentResponse]
    public partial class UserProfileResponse
    {
        public int UserId { get; set; }
        public string UserName { get; set; } = ""Default""; // Initializer doesn't matter for generation
        public bool IsActive { get; set; }
        public double Score { get; set; }
        private string InternalData { get; set; } // Should be ignored
        public int ReadOnlyProperty { get; }      // Should be included if public getter
    }
}
";

        var expectedGeneratedSource = @"// <auto-generated/>
using DotAigent.Core;

namespace MyTestApp
{
    public partial class UserProfileResponse : IExample
    {
        public static string JsonExample => @""{
    ""UserId"": 42,
    ""UserName"": ""example"",
    ""IsActive"": true,
    ""Score"": 3.14,
    ""ReadOnlyProperty"": 42
}"";
    }
}
";
        // Combine boilerplate and user source
        var fullInputSource = GetBoilerplate(userSource);

        // Use the testing helper to run the generator and verify output
        await VerifySourceGeneratorAsync(
            fullInputSource,
            ("UserProfileResponse.g.cs", expectedGeneratedSource) // Just filename and source
        );
    }

    // Test case: Class in the global namespace
    [Fact]
    public async Task GeneratesExample_ForClassInGlobalNamespace()
    {
        var userSource = @"
using DotAigent.Core;

[AgentResponse]
public partial class GlobalResponse
{
    public string Message { get; set; }
}
";

        var expectedGeneratedSource = @"// <auto-generated/>
using DotAigent.Core;

public partial class GlobalResponse : IExample
{
    public static string JsonExample => @""{
    ""Message"": ""example""
}"";
}
";
        var fullInputSource = GetBoilerplate(userSource);

        // Call the revised helper:
        await VerifySourceGeneratorAsync(
            fullInputSource,
            ("GlobalResponse.g.cs", expectedGeneratedSource) // Just filename and source
        );
    }

    // Test case: Class with unsupported property types
    [Fact]
    public async Task GeneratesExample_WithNullForUnsupportedTypes()
    {
        var userSource = @"
using DotAigent.Core;
using System; // For DateTime

namespace TestSpace
{
    [AgentResponse]
    public partial class ComplexResponse
    {
        public DateTime Timestamp { get; set; } // Unsupported, should be null
        public Guid RequestId { get; set; }     // Unsupported, should be null
        public int Count { get; set; }          // Supported
    }
}
";

        var expectedGeneratedSource = @"// <auto-generated/>
using DotAigent.Core;

namespace TestSpace
{
    public partial class ComplexResponse : IExample
    {
        public static string JsonExample => @""{
    ""Timestamp"": null,
    ""RequestId"": null,
    ""Count"": 42
}"";
    }
}
";

        var fullInputSource = GetBoilerplate(userSource);
        // Call the revised helper:
        await VerifySourceGeneratorAsync(
            fullInputSource,
            ("ComplexResponseResponse.g.cs", expectedGeneratedSource) // Just filename and source
        );

    }
    [Fact]
    public async Task GeneratesEmptyJsonObject_ForClassWithNoPublicProperties()
    {
            var userSource = @"
    using DotAigent.Core;

    namespace TestEmpty
    {
        [AgentResponse]
        public partial class EmptyResponse
        {
            private int _hidden;
            protected string ProtectedData { get; set; }
            internal object InternalThing { get; set; }
            public EmptyResponse(int hidden) { _hidden = hidden; } // Constructor
        }
    }
    ";

            var expectedGeneratedSource = @"// <auto-generated/>
    using DotAigent.Core;

    namespace TestEmpty
    {
        public partial class EmptyResponse : IExample
        {
            public static string JsonExample => @""{}"";
        }
    }
    ";
        // ... (userSource and expectedGeneratedSource remain the same) ...
        var fullInputSource = GetBoilerplate(userSource);

        // Call the revised helper:
        await VerifySourceGeneratorAsync(
            fullInputSource,
            ("EmptyResponse.g.cs", expectedGeneratedSource) // Just filename and source
        );
    }
    //     // Test case: Class with no public properties
    //     [Fact]
    //     public async Task GeneratesEmptyJsonObject_ForClassWithNoPublicProperties()
    //     {
    //         var userSource = @"
    // using DotAigent.Core;
    //
    // namespace TestEmpty
    // {
    //     [AgentResponse]
    //     public partial class EmptyResponse
    //     {
    //         private int _hidden;
    //         protected string ProtectedData { get; set; }
    //         internal object InternalThing { get; set; }
    //         public EmptyResponse(int hidden) { _hidden = hidden; } // Constructor
    //     }
    // }
    // ";
    //
    //         var expectedGeneratedSource = @"// <auto-generated/>
    // #nullable enable
    //
    // using DotAigent.Core;
    //
    // namespace TestEmpty
    // {
    //     public partial class EmptyResponse : IExample
    //     {
    //         public static string JsonExample => @""{}"";
    //     }
    // }
    // ";
    //         var fullInputSource = GetBoilerplate(userSource);
    //
    //         await VerifySourceGeneratorAsync(
    //             fullInputSource,
    //             ("AgentResponseExampleGenerator", "EmptyResponse.g.cs", expectedGeneratedSource)
    //         );
    //     }

    // Test case: No attribute applied
    [Fact]
    public async Task DoesNotGenerate_WhenAttributeIsMissing()
    {
        // This class does NOT have the [AgentResponse] attribute
        var userSource = @"
namespace NoAttributeTest
{
    public partial class SomeOtherClass
    {
        public string Name { get; set; }
    }
}
";
        var fullInputSource = GetBoilerplate(userSource);

        // Expect no source files to be generated by our specific generator
        await VerifySourceGeneratorAsync(fullInputSource /*, No expected outputs */);
    }

    // Test case: Multiple classes with the attribute
    [Fact]
    public async Task GeneratesExamples_ForMultipleClasses()
    {
        var userSource = @"
using DotAigent.Core;

namespace MultiTest
{
    [AgentResponse]
    public partial class FirstResponse
    {
        public int Id { get; set; }
    }

    // Another class without the attribute - should be ignored
    public class IgnoredClass { }

    [AgentResponse]
    public partial class SecondResponse
    {
        public string Value { get; set; }
    }
}
";

        var expectedGeneratedSource1 = @"// <auto-generated/>
using DotAigent.Core;

namespace MultiTest
{
    public partial class FirstResponse : IExample
    {
        public static string JsonExample => @""{
    ""Id"": 42
}"";
    }
}
";
        var expectedGeneratedSource2 = @"// <auto-generated/>
using DotAigent.Core;

namespace MultiTest
{
    public partial class SecondResponse : IExample
    {
        public static string JsonExample => @""{
    ""Value"": ""example""
}"";
    }
}
";
        var fullInputSource = GetBoilerplate(userSource);

        // await VerifySourceGeneratorAsync(
        //     fullInputSource,
        //     ("AgentResponseExampleGenerator", "FirstResponse.g.cs", expectedGeneratedSource1),
        //     ("AgentResponseExampleGenerator", "SecondResponse.g.cs", expectedGeneratedSource2)
        // );
    }
    // --- Helper Method ---
    // Wraps the core verification logic for cleaner tests
    // Takes only filename and source pairs for the generator under test.
    private Task VerifySourceGeneratorAsync(string source, params (string filename, string generatedSource)[] expected)
    {
        var test = new CSharpSourceGeneratorTest<GeneratorUnderTest, XUnitVerifier>
        {
            TestState =
        {
            Sources = { source },
            // Ensure you have necessary references if not defaulted correctly
            // E.g., if DotAigent.Core is in a separate project/assembly:
            // ReferenceAssemblies = ReferenceAssemblies.Default.AddPackages(ImmutableArray.Create(/* potentially needed NuGet packages */))
            //                                                .AddAssemblies(ImmutableArray.Create(typeof(DotAigent.Core.AgentResponseAttribute).Assembly.Location)) // Add assembly explicitly if needed
        },
        };

        // Add expected outputs, associating them explicitly with our GeneratorUnderTest type
        foreach (var (filename, generatedSource) in expected)
        {
            test.TestState.GeneratedSources.Add(
                (typeof(GeneratorUnderTest), filename, generatedSource) // Use typeof here!
            );
        }

        // Optionally clear default generators if they interfere (usually not needed unless debugging specific issues)
        // test.TestState.GeneratedSources.Clear();

        return test.RunAsync();
    }
    // // --- Helper Method ---
    // // Wraps the core verification logic for cleaner tests
    // private Task VerifySourceGeneratorAsync(string source, params (string generatorName, string filename, string generatedSource)[] expected)
    // {
    //     var test = new CSharpSourceGeneratorTest<GeneratorUnderTest, XUnitVerifier>
    //     {
    //         TestState =
    //         {
    //             Sources = { source },
    //         },
    //     };
    //
    //     foreach (var (generatorName, filename, generatedSource) in expected)
    //     {
    //         // Find the specific generator assembly if needed, otherwise often inferred.
    //         // Adjust the generator name if your generator assembly name is different.
    //         test.TestState.GeneratedSources.Add(
    //             (typeof(GeneratorUnderTest), filename, generatedSource)
    //         );
    //     }
    //
    //     // Optionally: Disable default generated sources if they interfere
    //     // test.TestState.GeneratedSources.Clear(); // Use if default generators cause issues
    //
    //     // ReferenceAssemblies can be customized if needed, but often defaults are okay
    //     // test.ReferenceAssemblies = ...;
    //
    //     return test.RunAsync();
    // }
}
